version: v1
name: ADF AWS
pipeline:
  b2a51692-05b1-4870-a2b3-3139b571603c:
    tasks:
      99635f8c-ded4-4f5e-80ad-e82a6e9c661b:
        integration: AWS_GLUE
        integration_job: AWS_GLUE_RUN_JOB
        parameters:
          job_name: Testing
          arguments: '{

            "bill_name":${{ inputs.bill_name }}


            }'
        depends_on: []
        name: Run AWS Glue
        tags: []
        treat_failure_as_warning: true
    depends_on: []
    name: ''
  d54304eb-4b4f-4973-b80e-1960fb5d6838:
    tasks:
      95728603-a30e-4c4c-bbab-7e2483d0d0f6:
        integration: AWS_REDSHIFT
        integration_job: AWS_REDSHIFT_EXECUTE_STATEMENT
        parameters:
          statement: SELECT * from DEV.PUBLIC."raw" LIMIT 5;
        depends_on: []
        name: Excecute Query
        tags: []
        connection: ${{ ENV.REDSHIFT_CONNECTION }}
    depends_on:
    - b2a51692-05b1-4870-a2b3-3139b571603c
    name: ''
  58908718-c47b-4e88-b208-1fedc60339d1:
    tasks:
      ecfe61a8-fb54-47f0-b397-132a119fb97c:
        integration: AZURE_DATA_FACTORY
        integration_job: ADF_PIPELINE_RUN
        parameters:
          resource_group: adf
          data_factory: adf
          pipeline_name: adf
        depends_on: []
        name: adf
        tags: []
    depends_on:
    - 1e7b985f-6def-4d39-add6-0b1be6b572e6
    name: ''
  1e7b985f-6def-4d39-add6-0b1be6b572e6:
    tasks:
      5d48aa0f-d1ec-45f7-b760-a548e96ea6bc:
        integration: SNOWFLAKE
        integration_job: SNOWFLAKE_RUN_TEST
        parameters:
          statement: "select sum(1) from table \nwhere date = current_date() ;"
          error_threshold_expression: < 100
          warn_threshold_expression: < 5000
        depends_on: []
        name: DQ Test
        tags: []
    depends_on:
    - d54304eb-4b4f-4973-b80e-1960fb5d6838
    name: ''
schedule: []
sensors:
  35fdbf1d-633a-47bb-bdc3-bc4ed8b31c92:
    name: Sensor trigger
    cron: 0 8-12 ? * * *
    timezone: Europe/London
    timeout_mins: 60
    checks:
      AI Bill Creation:
        integration: ORCHESTRA
        sensor_type: ORCHESTRA_WEBHOOK_EVENT
        parameters:
          event_type: AI_BILL_CREATION
          check_latest_event: false
trigger_events: []
webhook:
  enabled: true
  run_inputs:
    bill_name: '{{inputs.bill_name}}'
inputs:
  bill_name:
    type: string
    default: default_bill
